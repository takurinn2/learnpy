# 作用域(scope)

b = 20
def fn():
    a = 10  # a定义在函数内部，所以他的作用域就是函数内部，函数外部无法访问
    print('函数内部:','a =',a)
    print('函数内部:','b =',b)
# fn()
# print('函数外部:','a =',a)
# print('函数外部:','b =',b)

# 在python中一共有两种作用域
# 全局作用域
#   - 全局作用域在程序执行时创建，在程序结束时销毁
#   - 所有函数以外的区域都是全局作用域
#   - 在全局作用域中定义的变量，都属于全局变量，全局变量可以在程序的任意位置被访问
# 函数作用域
#   - 函数作用域在函数调用时创建，在调用结束时销毁
#   - 函数每调用一次就会产生一个新的函数作用域
#   - 在函数作用域中定义的变量，都是局部变量，它只能在函数内部被访问
# 变量的查找
#   - 当我们使用变量时，会有现在当前作用域中寻找，有则使用
#   - 如果没有则区上一级作用域中寻找，以此类推
#   - 直到全局作用域，如果没有，抛出异常
def fn2():
    a = 30

    def fn3():
        a = 40
        print('fn3中:','a =',a)
    fn3()

# fn2()
a = 20
def fn3():
    # 如果需要修改全局变量，则需要使用global关键字，来声明变量
    global a # 声明在函数内部使用a时全局变量，此时再去修改a时，就是在修改全局的a
    a = 10  # 修改全局变量
    print('函数内部:','a =',a)
# fn3()
# print('函数外部:','a =',a)




# 命名空间(namespace)
# 命名空间指的时变量存储的位置，每一个变量都需要存储到指定的命名空间当中
# 每一个作用域都会有一个他对应的命名空间
# 全局命名空间，用来保存全局变量。函数命名空间用来保存函数中的变量
# 命名空间实际上是字典，是一个专门用来存储变量的字典

# locals()用来获取当前作用域的命名空间
# 如果在全区作用域中调用locals()则获取全局命名空间，函数作用域同理
scope = locals()#当前命名空间
print(type(scope))
# print(a)
# print(scope['a'])
# 向scope中添加一个key-value
scope['c'] = 1000 # 向字典中添加一个key-value就相当于在全局中创建一个变量
# print(c)
def fn4():
    a = 10
    scope = locals()#在函数内部调用locals()会获取到函数命名空间
    scope['b'] = 20
    # print(scope)
    global_scope = globals()
    print(global_scope['a'])
    # global_scope['a'] = 30
    print(b)

fn4()
