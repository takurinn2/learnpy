# 尝试求10的阶乘(10!)

# print(1*2*3*4*5*6*7*8*9*10)

# 创建一个变量来保存结果
n = 10
for i in range(1,10):
    n *= i
# print(n)

# 创建一个函数，可以用来求任意数的阶乘
def factorial(n):
    '''
        该函数用来求任意数的阶乘

        参数:
            n 要求阶乘的数字
    '''
    result = 1
    for i in range(1,n+1):
        result *= i
    return result

# print(factorial(10))

# 递归式的函数,在函数中调用自己
# 无穷递归,这个函数被调用，程序内存溢出，效果类似于死循环
# def fn(): 
#   fn()
# fn()

# 递归是解决问题的一种方式
#   整体思想是，将大问题分解成许多小问题，直到问题无法被分解 时，再去解决问题
# 递归式函数的两个要件
#   1.基线条件
#       - 问题可以被分解的最小问题
#   2.递归条件
#       - 问题继续分解的条件

# 递归与循环类似，基本可以互相替代
# 循环编写起来比较容易，阅读起来稍难
# 递归编写起来难，方便阅读
# 10! = 10 * 9!
# 9! = 9 * 8!
# ...
# 1! = 1
def factorial(n):
    '''
        该函数用来求任意数的阶乘

        参数:
            n 要求阶乘的数字
    '''
    # 基线条件 判断n是否为1，如果为1则此事不能再继续递归
    if n == 1 :
        return 1

    # 递归条件
    return n * factorial(n-1)

print(factorial(10))

# 练习
# 为任意数做幂运算

def power(n,i):
    '''
        用来为任意数字做幂运算
        
        参数:
            n 要做幂运算的数字
            i 做幂运算的次数
    '''
    # 基线
    if i == 1:
        return n
    # 递归
    return n * power(n , i-1)

print(power(8,6))
print(8**6)

# 检查是否是回文字符串
# 思路
#   先检查第一个字符和最后一个字符是否一致,如果不一致则不是
#   再检查第二位和倒数第二位
#   ...
def hui_wen(s):
    '''
        该函数用来指定字符串是否是回文字符串，是则返回True,否则返回False

        参数:
            s:检查的字符串
    '''
    # 基线
    if len(s) < 2:
        return True
    elif s[0] != s[-1]:
        return False
    # 递归
    return hui_wen(s[1:-1])
    

