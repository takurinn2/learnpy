# 类(class)
#   我们目前所学习的对象都是python的内置对象
#   内置不能满足所有要求，所以在开发中经常需要自定义一些对象
#   类，简单理解它是一个图纸，在程序中需要根据类创建对象
#   类是对象的图纸
#   对象是类的实例(instance)
#   如果多个对象是通过一个类创建的，我们称这些对象是一类对象
#   像int() float() str() list() dict() ...这些都是类
#   a = int(10) 创建一个int类的实例，等价于a = 10
#   我们自定义的类都需要使用大写字母开头，使用大驼峰命名法来对类命名

a = int(10) #创建int类的实例
b = str('hello')    #创建str类的实例
# print(a,type(a))

# 定义一个简单的类
# 使用class关键字来定义类，语法和函数很像!
# class 类名字([父类]):
#   代码块
class MyClass():
    pass

print(MyClass)
# 使用 MyClass创建一个对象
# 使用类来创建对象，就像调用一个函数一样

mc = MyClass()#mc是对象
mc2 = MyClass()#mc是对象
mc3 = MyClass()#mc是对象
mc4 = MyClass()#mc是对象
# 上面都是MyClass的实例，都是一类对象
# isinstance()用来检查一个对象是否是一个类的实例
result = isinstance(mc2,MyClass)
result = isinstance(mc,str)

# print(mc,type(mc))
# print(result)


# 类也是一个对象
# 类是一个用来创建对象的对象
# 类是type类型的对象，定义类实际上就是定义了一个type类的对象
# print(id(MyClass),type(MyClass))
class MyClass():
    pass
mc = MyClass()
# 1.创建变量mc
# 2.在内存中创建一个新对象
# 3.将对象的id赋值给变量

# 通过MyClass这个类创建的对象都是一个空对象
# 可以向对象中添加变量，对象中的变量称为属性
# 语法:对象.属性 = 属性值

mc.name = 'xxk'


# 类的定义
    #   所有事物都由两部分构成
    #   1.数据(属性)
    #   2.行为(方法)
    # 
    # 属性和方法查找流程
    #   当我们调用一个对象的属性时，解析器会现在当前对象中寻找是否含有该属性，
    #       如果有,则直接返回当前对象的属性值
    #       如果没有，则去当前对象的类对象中去寻找，如果有，则返回类对象的属性值
    #       如果还是没有，报错
    # 类对象和实例对象中都可以保存属性(方法)
        # 如果这个属性(方法)是所有实例共享的，则应该将其保存在类对象中
        # 如果这个属性(方法)是某个属性独有的,则应该保存到实例对象中
